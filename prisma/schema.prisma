// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Priority {
  LOW
  NORMAL
  URGENT
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)
  conversations Conversation[]
  requestedTickets Ticket[] @relation("requestedTickets")
  assignedTickets  Ticket[] @relation("assignedTickets")
 
  @@map("users")
}

model Conversation {
  id            String   @id @default(uuid())
  title         String
  organisation  String
  platform      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chats         Chat[]
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  @@map("conversations")
}

model Chat {
  id             String       @id @default(uuid())
  role           String
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@map("chats")
}

model Ticket {
  id          String   @id @default(uuid())
  subject     String
  description String   @db.Text
  priority    Priority @default(NORMAL)
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
  fileUrl     String?
  // Relations
  requestedBy    User    @relation(name: "requestedTickets", fields: [requestedById], references: [id])
  requestedById  String
  assignedTo     User?   @relation(name: "assignedTickets", fields: [assignedToId], references: [id])
  assignedToId   String?
  
  @@map("tickets")
}